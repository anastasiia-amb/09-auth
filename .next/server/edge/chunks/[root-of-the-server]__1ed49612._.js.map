{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/09-auth/lib/api/api.ts"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const nextServer = axios.create({\r\n  baseURL: process.env.NEXT_PUBLIC_API_URL + \"/api\",\r\n  withCredentials: true,\r\n});\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,aAAa,sKAAK,CAAC,MAAM,CAAC;IACrC,SAAS,4DAAkC;IAC3C,iBAAiB;AACnB"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/09-auth/lib/api/serverApi.ts"],"sourcesContent":["import { cookies } from \"next/headers\";\r\nimport { nextServer } from \"./api\";\r\nimport { Note } from \"@/types/note\";\r\nimport { User } from \"@/types/user\";\r\nimport { NoteResponse } from \"./clientApi\";\r\n\r\nexport const checkServerSession = async () => {\r\n  const cookieStore = await cookies();\r\n  const res = await nextServer.get(\"/auth/session\", {\r\n    headers: {\r\n      Cookie: cookieStore.toString(),\r\n    },\r\n  });\r\n  return res;\r\n};\r\n\r\nexport const getServerMe = async () => {\r\n  const cookieStore = cookies();\r\n\r\n  const res = await nextServer.get<User>(\"/users/me\", {\r\n    headers: {\r\n      Cookie: cookieStore.toString(),\r\n    },\r\n  });\r\n\r\n  return res.data;\r\n};\r\n\r\nexport const fetchServerNotes = async (\r\n  page: number,\r\n  query: string,\r\n  tag?: string\r\n): Promise<NoteResponse> => {\r\n  const cookieStore = cookies();\r\n  const response = await nextServer.get<NoteResponse>(\"/notes\", {\r\n    params: {\r\n      page: page,\r\n      perPage: 12,\r\n      search: query,\r\n      tag: tag,\r\n    },\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Cookie: cookieStore.toString(),\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const fetchServerNoteById = async (id: string): Promise<Note> => {\r\n  const cookieStore = cookies();\r\n  const response = await nextServer.get<Note>(`/notes/${id}`, {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Cookie: cookieStore.toString(),\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AACA;;;AAKO,MAAM,qBAAqB;IAChC,MAAM,cAAc,MAAM,IAAA,oMAAO;IACjC,MAAM,MAAM,MAAM,qJAAU,CAAC,GAAG,CAAC,iBAAiB;QAChD,SAAS;YACP,QAAQ,YAAY,QAAQ;QAC9B;IACF;IACA,OAAO;AACT;AAEO,MAAM,cAAc;IACzB,MAAM,cAAc,IAAA,oMAAO;IAE3B,MAAM,MAAM,MAAM,qJAAU,CAAC,GAAG,CAAO,aAAa;QAClD,SAAS;YACP,QAAQ,YAAY,QAAQ;QAC9B;IACF;IAEA,OAAO,IAAI,IAAI;AACjB;AAEO,MAAM,mBAAmB,OAC9B,MACA,OACA;IAEA,MAAM,cAAc,IAAA,oMAAO;IAC3B,MAAM,WAAW,MAAM,qJAAU,CAAC,GAAG,CAAe,UAAU;QAC5D,QAAQ;YACN,MAAM;YACN,SAAS;YACT,QAAQ;YACR,KAAK;QACP;QACA,SAAS;YACP,gBAAgB;YAChB,QAAQ,YAAY,QAAQ;QAC9B;IACF;IACA,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,sBAAsB,OAAO;IACxC,MAAM,cAAc,IAAA,oMAAO;IAC3B,MAAM,WAAW,MAAM,qJAAU,CAAC,GAAG,CAAO,CAAC,OAAO,EAAE,IAAI,EAAE;QAC1D,SAAS;YACP,gBAAgB;YAChB,QAAQ,YAAY,QAAQ;QAC9B;IACF;IACA,OAAO,SAAS,IAAI;AACtB"}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/09-auth/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { cookies } from \"next/headers\";\r\nimport { parse } from \"cookie\";\r\nimport { checkServerSession } from \"./lib/api/serverApi\";\r\n\r\nconst privateRoutes = [\"/profile\", \"/notes\"];\r\nconst publicRoutes = [\"/sign-in\", \"/sign-up\"];\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  const { pathname } = request.nextUrl;\r\n  const cookieStore = await cookies();\r\n  const accessToken = cookieStore.get(\"accessToken\")?.value;\r\n  const refreshToken = cookieStore.get(\"refreshToken\")?.value;\r\n\r\n  const isPublicRoute = publicRoutes.some((route) =>\r\n    pathname.startsWith(route)\r\n  );\r\n  const isPrivateRoute = privateRoutes.some((route) =>\r\n    pathname.startsWith(route)\r\n  );\r\n\r\n  if (!accessToken) {\r\n    if (refreshToken) {\r\n      // Якщо accessToken відсутній, але є refreshToken — потрібно перевірити сесію навіть для публічного маршруту,\r\n      // адже сесія може залишатися активною, і тоді потрібно заборонити доступ до публічного маршруту.\r\n      const data = await checkServerSession();\r\n      const setCookie = data.headers[\"set-cookie\"];\r\n\r\n      if (setCookie) {\r\n        const cookieArray = Array.isArray(setCookie) ? setCookie : [setCookie];\r\n        for (const cookieStr of cookieArray) {\r\n          const parsed = parse(cookieStr);\r\n          const options = {\r\n            expires: parsed.Expires ? new Date(parsed.Expires) : undefined,\r\n            path: parsed.Path,\r\n            maxAge: Number(parsed[\"Max-Age\"]),\r\n          };\r\n          if (parsed.accessToken)\r\n            cookieStore.set(\"accessToken\", parsed.accessToken, options);\r\n          if (parsed.refreshToken)\r\n            cookieStore.set(\"refreshToken\", parsed.refreshToken, options);\r\n        }\r\n        // Якщо сесія все ще активна:\r\n        // для публічного маршруту — виконуємо редірект на головну.\r\n        if (isPublicRoute) {\r\n          return NextResponse.redirect(new URL(\"/\", request.url), {\r\n            headers: {\r\n              Cookie: cookieStore.toString(),\r\n            },\r\n          });\r\n        }\r\n        // для приватного маршруту — дозволяємо доступ\r\n        if (isPrivateRoute) {\r\n          return NextResponse.next({\r\n            headers: {\r\n              Cookie: cookieStore.toString(),\r\n            },\r\n          });\r\n        }\r\n      }\r\n    }\r\n    // Якщо refreshToken або сесії немає:\r\n    // публічний маршрут — дозволяємо доступ\r\n    if (isPublicRoute) {\r\n      return NextResponse.next();\r\n    }\r\n\r\n    // приватний маршрут — редірект на сторінку входу\r\n    if (isPrivateRoute) {\r\n      return NextResponse.redirect(new URL(\"/sign-in\", request.url));\r\n    }\r\n  }\r\n\r\n  // Якщо accessToken існує:\r\n  // публічний маршрут — виконуємо редірект на головну\r\n  if (isPublicRoute) {\r\n    return NextResponse.redirect(new URL(\"/\", request.url));\r\n  }\r\n  // приватний маршрут — дозволяємо доступ\r\n  if (isPrivateRoute) {\r\n    return NextResponse.next();\r\n  }\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\"/profile/:path*\", \"/sign-in\", \"/sign-up\"],\r\n};\r\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;AAEA,MAAM,gBAAgB;IAAC;IAAY;CAAS;AAC5C,MAAM,eAAe;IAAC;IAAY;CAAW;AAEtC,eAAe,WAAW,OAAoB;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IACpC,MAAM,cAAc,MAAM,IAAA,oMAAO;IACjC,MAAM,cAAc,YAAY,GAAG,CAAC,gBAAgB;IACpD,MAAM,eAAe,YAAY,GAAG,CAAC,iBAAiB;IAEtD,MAAM,gBAAgB,aAAa,IAAI,CAAC,CAAC,QACvC,SAAS,UAAU,CAAC;IAEtB,MAAM,iBAAiB,cAAc,IAAI,CAAC,CAAC,QACzC,SAAS,UAAU,CAAC;IAGtB,IAAI,CAAC,aAAa;QAChB,IAAI,cAAc;YAChB,6GAA6G;YAC7G,iGAAiG;YACjG,MAAM,OAAO,MAAM,IAAA,mKAAkB;YACrC,MAAM,YAAY,KAAK,OAAO,CAAC,aAAa;YAE5C,IAAI,WAAW;gBACb,MAAM,cAAc,MAAM,OAAO,CAAC,aAAa,YAAY;oBAAC;iBAAU;gBACtE,KAAK,MAAM,aAAa,YAAa;oBACnC,MAAM,SAAS,IAAA,sKAAK,EAAC;oBACrB,MAAM,UAAU;wBACd,SAAS,OAAO,OAAO,GAAG,IAAI,KAAK,OAAO,OAAO,IAAI;wBACrD,MAAM,OAAO,IAAI;wBACjB,QAAQ,OAAO,MAAM,CAAC,UAAU;oBAClC;oBACA,IAAI,OAAO,WAAW,EACpB,YAAY,GAAG,CAAC,eAAe,OAAO,WAAW,EAAE;oBACrD,IAAI,OAAO,YAAY,EACrB,YAAY,GAAG,CAAC,gBAAgB,OAAO,YAAY,EAAE;gBACzD;gBACA,6BAA6B;gBAC7B,2DAA2D;gBAC3D,IAAI,eAAe;oBACjB,OAAO,8MAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG,GAAG;wBACtD,SAAS;4BACP,QAAQ,YAAY,QAAQ;wBAC9B;oBACF;gBACF;gBACA,8CAA8C;gBAC9C,IAAI,gBAAgB;oBAClB,OAAO,8MAAY,CAAC,IAAI,CAAC;wBACvB,SAAS;4BACP,QAAQ,YAAY,QAAQ;wBAC9B;oBACF;gBACF;YACF;QACF;QACA,qCAAqC;QACrC,wCAAwC;QACxC,IAAI,eAAe;YACjB,OAAO,8MAAY,CAAC,IAAI;QAC1B;QAEA,iDAAiD;QACjD,IAAI,gBAAgB;YAClB,OAAO,8MAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,YAAY,QAAQ,GAAG;QAC9D;IACF;IAEA,0BAA0B;IAC1B,oDAAoD;IACpD,IAAI,eAAe;QACjB,OAAO,8MAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IACA,wCAAwC;IACxC,IAAI,gBAAgB;QAClB,OAAO,8MAAY,CAAC,IAAI;IAC1B;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;QAAmB;QAAY;KAAW;AACtD"}}]
}