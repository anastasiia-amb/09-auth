{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/msigf/Desktop/Projects/07-routing-nextjs/lib/api.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport type { Note } from \"../types/note\";\r\n\r\nexport interface NoteResponse {\r\n  notes: Note[];\r\n  totalPages: number;\r\n}\r\n\r\nexport interface CreateNoteParams {\r\n  title: string;\r\n  content: string;\r\n  tag: \"Todo\" | \"Work\" | \"Personal\" | \"Meeting\" | \"Shopping\";\r\n}\r\n\r\nexport const fetchNotes = async (\r\n  page: number,\r\n  query: string,\r\n  tag?: string\r\n): Promise<NoteResponse> => {\r\n  const response = await axios.get<NoteResponse>(\r\n    `https://notehub-public.goit.study/api/notes`,\r\n    {\r\n      params: {\r\n        page: page,\r\n        perPage: 12,\r\n        search: query,\r\n        tag: tag,\r\n      },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${process.env.NEXT_PUBLIC_NOTEHUB_TOKEN}`,\r\n      },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const fetchNoteById = async (id: string): Promise<Note> => {\r\n  const response = await axios.get<Note>(\r\n    `https://notehub-public.goit.study/api/notes/${id}`,\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${process.env.NEXT_PUBLIC_NOTEHUB_TOKEN}`,\r\n      },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const createNote = async (newNote: CreateNoteParams): Promise<Note> => {\r\n  const response = await axios.post<Note>(\r\n    `https://notehub-public.goit.study/api/notes`,\r\n    newNote,\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${process.env.NEXT_PUBLIC_NOTEHUB_TOKEN}`,\r\n      },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const deleteNote = async (id: string): Promise<Note> => {\r\n  const response = await axios.delete<Note>(\r\n    `https://notehub-public.goit.study/api/notes/${id}`,\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${process.env.NEXT_PUBLIC_NOTEHUB_TOKEN}`,\r\n      },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;;AAcO,MAAM,aAAa,OACxB,MACA,OACA;IAEA,MAAM,WAAW,MAAM,2KAAK,CAAC,GAAG,CAC9B,CAAC,2CAA2C,CAAC,EAC7C;QACE,QAAQ;YACN,MAAM;YACN,SAAS;YACT,QAAQ;YACR,KAAK;QACP;QACA,SAAS;YACP,gBAAgB;YAChB,eAAe,CAAC,OAAO,4LAAyC;QAClE;IACF;IAEF,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,gBAAgB,OAAO;IAClC,MAAM,WAAW,MAAM,2KAAK,CAAC,GAAG,CAC9B,CAAC,4CAA4C,EAAE,IAAI,EACnD;QACE,SAAS;YACP,gBAAgB;YAChB,eAAe,CAAC,OAAO,4LAAyC;QAClE;IACF;IAEF,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,aAAa,OAAO;IAC/B,MAAM,WAAW,MAAM,2KAAK,CAAC,IAAI,CAC/B,CAAC,2CAA2C,CAAC,EAC7C,SACA;QACE,SAAS;YACP,gBAAgB;YAChB,eAAe,CAAC,OAAO,4LAAyC;QAClE;IACF;IAEF,OAAO,SAAS,IAAI;AACtB;AAEO,MAAM,aAAa,OAAO;IAC/B,MAAM,WAAW,MAAM,2KAAK,CAAC,MAAM,CACjC,CAAC,4CAA4C,EAAE,IAAI,EACnD;QACE,SAAS;YACP,gBAAgB;YAChB,eAAe,CAAC,OAAO,4LAAyC;QAClE;IACF;IAEF,OAAO,SAAS,IAAI;AACtB","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/msigf/Desktop/Projects/07-routing-nextjs/app/notes/filter/%5B...slug%5D/Notes.client.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/07-routing-nextjs/app/notes/filter/[...slug]/Notes.client.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/07-routing-nextjs/app/notes/filter/[...slug]/Notes.client.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,mSAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAiU,GAC9V,+FACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/msigf/Desktop/Projects/07-routing-nextjs/app/notes/filter/%5B...slug%5D/Notes.client.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/07-routing-nextjs/app/notes/filter/[...slug]/Notes.client.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/07-routing-nextjs/app/notes/filter/[...slug]/Notes.client.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,mSAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA6S,GAC1U,2EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/msigf/Desktop/Projects/07-routing-nextjs/app/notes/filter/%5B...slug%5D/page.tsx"],"sourcesContent":["import {\r\n  QueryClient,\r\n  dehydrate,\r\n  HydrationBoundary,\r\n} from \"@tanstack/react-query\";\r\nimport { fetchNotes } from \"@/lib/api\";\r\nimport NotesClient from \"./Notes.client\";\r\n\r\ntype Props = {\r\n  params: Promise<{ slug: string[] }>;\r\n};\r\n\r\nexport default async function Notes({ params }: Props) {\r\n  const queryClient = new QueryClient();\r\n  const { slug } = await params;\r\n  const tag = slug[0] === \"All\" ? undefined : slug[0];\r\n\r\n  await queryClient.prefetchQuery({\r\n    queryKey: [\"notes\", { query: \"\", page: 1, tag: tag }],\r\n    queryFn: () => fetchNotes(1, \"\", tag),\r\n  });\r\n\r\n  return (\r\n    <HydrationBoundary state={dehydrate(queryClient)}>\r\n      <NotesClient tag={tag} />\r\n    </HydrationBoundary>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AAAA;AAKA;AACA;;;;;AAMe,eAAe,MAAM,EAAE,MAAM,EAAS;IACnD,MAAM,cAAc,IAAI,uNAAW;IACnC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM;IACvB,MAAM,MAAM,IAAI,CAAC,EAAE,KAAK,QAAQ,YAAY,IAAI,CAAC,EAAE;IAEnD,MAAM,YAAY,aAAa,CAAC;QAC9B,UAAU;YAAC;YAAS;gBAAE,OAAO;gBAAI,MAAM;gBAAG,KAAK;YAAI;SAAE;QACrD,SAAS,IAAM,IAAA,mJAAU,EAAC,GAAG,IAAI;IACnC;IAEA,qBACE,yQAAC,oOAAiB;QAAC,OAAO,IAAA,mNAAS,EAAC;kBAClC,cAAA,yQAAC,kMAAW;YAAC,KAAK;;;;;;;;;;;AAGxB","debugId":null}}]
}