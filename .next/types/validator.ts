// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type {
  AppRoutes,
  LayoutRoutes,
  ParamMap,
  AppRouteHandlerRoutes,
} from "./routes.js";
import type {
  ResolvingMetadata,
  ResolvingViewport,
} from "next/dist/lib/metadata/types/metadata-interface.js";
import type { NextRequest } from "next/server.js";

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default:
    | React.ComponentType<{ params: Promise<ParamMap[Route]> } & any>
    | ((
        props: { params: Promise<ParamMap[Route]> } & any
      ) =>
        | React.ReactNode
        | Promise<React.ReactNode>
        | never
        | void
        | Promise<void>);
  generateStaticParams?: (props: {
    params: ParamMap[Route];
  }) => Promise<any[]> | any[];
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any;
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any;
  metadata?: any;
  viewport?: any;
};

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default:
    | React.ComponentType<LayoutProps<Route>>
    | ((
        props: LayoutProps<Route>
      ) =>
        | React.ReactNode
        | Promise<React.ReactNode>
        | never
        | void
        | Promise<void>);
  generateStaticParams?: (props: {
    params: ParamMap[Route];
  }) => Promise<any[]> | any[];
  generateMetadata?: (
    props: { params: Promise<ParamMap[R../../app/(auth routes)/sign-up/page.jsx
    parent: ResolvingMetadata
  ) => Promise<any> | any;
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any;
  metadata?: any;
  viewport?: any;
};

type RouteHandlerConfig<
  Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes,
> = {
  GET?: (
    request: NextRequest,
    context: { params: Promise<ParamMap[Route]> }
  ) => Promise<Response> | Response | Promise<void> | void;
  POST?: (
    request: NextRequest,
    context: { params: Promise<ParamMap[Route]> }
  ) => Promise<Response> | Response | Promise<void> | void;
  PUT?: (
    request: NextRequest,
    context: { params: Promise<ParamMap[Route]> }
  ) => Promise<Response> | Response | Promise<void> | void;
  PATCH?: (
    request: NextRequest,
    context: { params: Promise<ParamMap[Route]> }
  ) => Promise<Response> | Response | Promise<void> | void;
  DELETE?: (
    request: NextRequest,
    context: { params: Promise<ParamMap[Route]> }
  ) => Promise<Response> | Response | Promise<void> | void;
  HEAD?: (
    request: NextRequest,
    context: { params: Promise<ParamMap[Route]> }
  ) => Promise<Response> | Response | Promise<void> | void;
  OPTIONS?: (
    request: NextRequest,
    context: { params: Promise<ParamMap[Route]> }
  ) => Promise<Response> | Response | Promise<void> | void;
};

// Validate ..\..\app\(auth routes)\sing-in\page.tsx
{
  const handler =
    {} as typeof import("../../app/(auth routes)/sign-in/page.jsx");
  handler satisfies AppPageConfig<"/sing-in">;
}

// Validate ..\..\app\(auth routes)\sing-up\page.tsx
{
  const handler =
    {} as typeof import("..\\..\\app\\(auth routes)\\sing-up\\page.js");
  handler satisfies AppPageConfig<"/sing-up">;
}

// Validate ..\..\app\(private routes)\notes\[id]\page.tsx
{
  const handler =
    {} as typeof import("..\\..\\app\\(private routes)\\notes\\[id]\\page.js");
  handler satisfies AppPageConfig<"/notes/[id]">;
}

// Validate ..\..\app\(private routes)\notes\action\create\page.tsx
{
  const handler =
    {} as typeof import("..\\..\\app\\(private routes)\\notes\\action\\create\\page.js");
  handler satisfies AppPageConfig<"/notes/action/create">;
}

// Validate ..\..\app\(private routes)\notes\filter\[...slug]\page.tsx
{
  const handler =
    {} as typeof import("..\\..\\app\\(private routes)\\notes\\filter\\[...slug]\\page.js");
  handler satisfies AppPageConfig<"/notes/filter/[...slug]">;
}

// Validate ..\..\app\(private routes)\profile\edit\page.tsx
{
  const handler =
    {} as typeof import("..\\..\\app\\(private routes)\\profile\\edit\\page.js");
  handler satisfies AppPageConfig<"/profile/edit">;
}

// Validate ..\..\app\(private routes)\profile\page.tsx
{
  const handler =
    {} as typeof import("..\\..\\app\\(private routes)\\profile\\page.js");
  handler satisfies AppPageConfig<"/profile">;
}

// Validate ..\..\app\@modal\(.)notes\[id]\page.tsx
{
  const handler =
    {} as typeof import("..\\..\\app\\@modal\\(.)notes\\[id]\\page.js");
  handler satisfies AppPageConfig<"/notes/[id]">;
}

// Validate ..\..\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\app\\page.js");
  handler satisfies AppPageConfig<"/">;
}

// Validate ..\..\app\api\auth\login\route.ts
{
  const handler =
    {} as typeof import("..\\..\\app\\api\\auth\\login\\route.js");
  handler satisfies RouteHandlerConfig<"/api/auth/login">;
}

// Validate ..\..\app\api\auth\logout\route.ts
{
  const handler =
    {} as typeof import("..\\..\\app\\api\\auth\\logout\\route.js");
  handler satisfies RouteHandlerConfig<"/api/auth/logout">;
}

// Validate ..\..\app\api\auth\refresh\route.ts
{
  const handler =
    {} as typeof import("..\\..\\app\\api\\auth\\refresh\\route.js");
  handler satisfies RouteHandlerConfig<"/api/auth/refresh">;
}

// Validate ..\..\app\api\auth\register\route.ts
{
  const handler =
    {} as typeof import("..\\..\\app\\api\\auth\\register\\route.js");
  handler satisfies RouteHandlerConfig<"/api/auth/register">;
}

// Validate ..\..\app\api\auth\session\route.ts
{
  const handler =
    {} as typeof import("..\\..\\app\\api\\auth\\session\\route.js");
  handler satisfies RouteHandlerConfig<"/api/auth/session">;
}

// Validate ..\..\app\api\notes\[id]\route.ts
{
  const handler =
    {} as typeof import("..\\..\\app\\api\\notes\\[id]\\route.js");
  handler satisfies RouteHandlerConfig<"/api/notes/[id]">;
}

// Validate ..\..\app\api\notes\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\notes\\route.js");
  handler satisfies RouteHandlerConfig<"/api/notes">;
}

// Validate ..\..\app\api\users\me\route.ts
{
  const handler = {} as typeof import("..\\..\\app\\api\\users\\me\\route.js");
  handler satisfies RouteHandlerConfig<"/api/users/me">;
}

// Validate ..\..\app\(auth routes)\layout.tsx
{
  const handler = {} as typeof import("..\\..\\app\\(auth routes)\\layout.js");
  handler satisfies LayoutConfig<"/">;
}

// Validate ..\..\app\(private routes)\notes\filter\layout.tsx
{
  const handler =
    {} as typeof import("..\\..\\app\\(private routes)\\notes\\filter\\layout.js");
  handler satisfies LayoutConfig<"/notes/filter">;
}

// Validate ..\..\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\app\\layout.js");
  handler satisfies LayoutConfig<"/">;
}
